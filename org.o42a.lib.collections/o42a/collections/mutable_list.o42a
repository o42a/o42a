~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Copyright (C) 2013,2014 Ruslan Lopatin

This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mutable list ::=> list
======================
~~~
A mutable list of elements.
~~~

@Indexed =< * (
  Item =<> * (

    @Assignable :=< * ~~ New value can be assigned to mutable list item.

    <*Set> Set @assignable (
      ~~~
      Value assignment clause.

      It assigns a new value with <set> prototype.
      ~~~

      <New value <- *> *New value
    )
  )
)

Add :=<> void (
  ~~~
  Adds a new element to the list.
  ~~~

  New element :=< #element type` link ~~ Element to add.

  <*Add> Add (
    ~~~
    Adds to this list an element specified in square brackets.
    ~~~

    <[New element]> *New element
  )
)

Insert :=<> void (
  ~~~
  Inserts a new element at the given position.
  ~~~

  Index :=< integer` link
  ~~~
  Element index to insert element at.

  Should be non-negative and less than or equal to the list size.
  ~~~

  New element :=< #element type` link ~~ Element to insert.

  <*Insert> Insert (
    ~~~
    Inserts an element specified to the given position of the list.

    Syntax: `list: insert [element] at [index]`\
            `list: insert [element, index]`
    ~~~

    <[New element] | insertion point...> *New element
    ~~ The <new element> to insert.
    <:Insertion point> (
      <At | index...> () ~~ An optional `at` clause.
      <[Index]> *Index   ~~ Insertion <index>.
    )
  )
)

Remove :=<> void (
  ~~~
  Removes an element at the given position from list.
  ~~~

  Index :=< integer` link ~~ An index of element to remove.

  <*Remove> Remove (
    ~~~
    Removes an element, which index is specified in square brackets.
    ~~~

    <[]> *Index ~~ An <index> of element to remove.
  )
)

<*Sublist> Sublist (
  ~~~
  Constructs a mutable sublist by the given right-open list indices interval.
  ~~~
  <[From...) | to> *From
  <[...To)!> *To
)

<*Trailing sublist> Sublist (
  ~~~
  Constructs a trailing mutable sublist by the given closed left-bounded
  list indices interval.
  ~~~
  <[From...-)!> *From
)

<*Leading sublist> Sublist (
  ~~~
  Constructs a leading mutable sublist by the given open right-bounded 
  list indices interval.
  ~~~
  <(-...To)!> *To
)

<(-Full sublist...-)!> ~~ Returns a mutable list itself when unbounded list
                       ~~ indices interval provided.
